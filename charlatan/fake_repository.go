// generated by "charlatan -output=charlatan/fake_repository.go -package=charlatan repository".  DO NOT EDIT.

package charlatan

import (
	"reflect"

	"github.com/jamesjoshuahill/test-doubles-golang"
)

// repositoryQueryInvocation represents a single call of Fakerepository.Query
type repositoryQueryInvocation struct {
	Parameters struct {
		Category string
	}
	Results struct {
		Ident1 []doubles.
			Record
		Ident2 error
	}
}

// NewrepositoryQueryInvocation creates a new instance of repositoryQueryInvocation
func NewrepositoryQueryInvocation(category string, ident1 []doubles.
	Record, ident2 error) *repositoryQueryInvocation {
	invocation := new(repositoryQueryInvocation)

	invocation.Parameters.Category = category

	invocation.Results.Ident1 = ident1
	invocation.Results.Ident2 = ident2

	return invocation
}

// repositoryTestingT represents the methods of "testing".T used by charlatan Fakes.  It avoids importing the testing package.
type repositoryTestingT interface {
	Error(...interface{})
	Errorf(string, ...interface{})
	Fatal(...interface{})
	Helper()
}

/*
Fakerepository is a mock implementation of repository for testing.
Use it in your tests as in this example:

	package example

	func TestWithrepository(t *testing.T) {
		f := &charlatan.Fakerepository{
			QueryHook: func(category string) (ident1 []doubles.
Record, ident2 error) {
				// ensure parameters meet expectations, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeQuery ...
		f.AssertQueryCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeQuery.
*/
type Fakerepository struct {
	QueryHook func(string) ([]doubles.
			Record, error)

	QueryCalls []*repositoryQueryInvocation
}

// NewFakerepositoryDefaultPanic returns an instance of Fakerepository with all hooks configured to panic
func NewFakerepositoryDefaultPanic() *Fakerepository {
	return &Fakerepository{
		QueryHook: func(string) (ident1 []doubles.
			Record, ident2 error) {
			panic("Unexpected call to repository.Query")
		},
	}
}

// NewFakerepositoryDefaultFatal returns an instance of Fakerepository with all hooks configured to call t.Fatal
func NewFakerepositoryDefaultFatal(t_sym1 repositoryTestingT) *Fakerepository {
	return &Fakerepository{
		QueryHook: func(string) (ident1 []doubles.
			Record, ident2 error) {
			t_sym1.Fatal("Unexpected call to repository.Query")
			return
		},
	}
}

// NewFakerepositoryDefaultError returns an instance of Fakerepository with all hooks configured to call t.Error
func NewFakerepositoryDefaultError(t_sym2 repositoryTestingT) *Fakerepository {
	return &Fakerepository{
		QueryHook: func(string) (ident1 []doubles.
			Record, ident2 error) {
			t_sym2.Error("Unexpected call to repository.Query")
			return
		},
	}
}

func (f *Fakerepository) Reset() {
	f.QueryCalls = []*repositoryQueryInvocation{}
}

func (f_sym3 *Fakerepository) Query(category string) (ident1 []doubles.
	Record, ident2 error) {
	if f_sym3.QueryHook == nil {
		panic("repository.Query() called but Fakerepository.QueryHook is nil")
	}

	invocation_sym3 := new(repositoryQueryInvocation)
	f_sym3.QueryCalls = append(f_sym3.QueryCalls, invocation_sym3)

	invocation_sym3.Parameters.Category = category

	ident1, ident2 = f_sym3.QueryHook(category)

	invocation_sym3.Results.Ident1 = ident1
	invocation_sym3.Results.Ident2 = ident2

	return
}

// SetQueryStub configures repository.Query to always return the given values
func (f_sym4 *Fakerepository) SetQueryStub(ident1 []doubles.
	Record, ident2 error) {
	f_sym4.QueryHook = func(string) ([]doubles.
		Record, error) {
		return ident1, ident2
	}
}

// SetQueryInvocation configures repository.Query to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym5 *Fakerepository) SetQueryInvocation(calls_sym5 []*repositoryQueryInvocation, fallback_sym5 func() ([]doubles.
	Record, error)) {
	f_sym5.QueryHook = func(category string) (ident1 []doubles.
		Record, ident2 error) {
		for _, call_sym5 := range calls_sym5 {
			if reflect.DeepEqual(call_sym5.Parameters.Category, category) {
				ident1 = call_sym5.Results.Ident1
				ident2 = call_sym5.Results.Ident2

				return
			}
		}

		return fallback_sym5()
	}
}

// QueryCalled returns true if Fakerepository.Query was called
func (f *Fakerepository) QueryCalled() bool {
	return len(f.QueryCalls) != 0
}

// AssertQueryCalled calls t.Error if Fakerepository.Query was not called
func (f *Fakerepository) AssertQueryCalled(t repositoryTestingT) {
	t.Helper()
	if len(f.QueryCalls) == 0 {
		t.Error("Fakerepository.Query not called, expected at least one")
	}
}

// QueryNotCalled returns true if Fakerepository.Query was not called
func (f *Fakerepository) QueryNotCalled() bool {
	return len(f.QueryCalls) == 0
}

// AssertQueryNotCalled calls t.Error if Fakerepository.Query was called
func (f *Fakerepository) AssertQueryNotCalled(t repositoryTestingT) {
	t.Helper()
	if len(f.QueryCalls) != 0 {
		t.Error("Fakerepository.Query called, expected none")
	}
}

// QueryCalledOnce returns true if Fakerepository.Query was called exactly once
func (f *Fakerepository) QueryCalledOnce() bool {
	return len(f.QueryCalls) == 1
}

// AssertQueryCalledOnce calls t.Error if Fakerepository.Query was not called exactly once
func (f *Fakerepository) AssertQueryCalledOnce(t repositoryTestingT) {
	t.Helper()
	if len(f.QueryCalls) != 1 {
		t.Errorf("Fakerepository.Query called %d times, expected 1", len(f.QueryCalls))
	}
}

// QueryCalledN returns true if Fakerepository.Query was called at least n times
func (f *Fakerepository) QueryCalledN(n int) bool {
	return len(f.QueryCalls) >= n
}

// AssertQueryCalledN calls t.Error if Fakerepository.Query was called less than n times
func (f *Fakerepository) AssertQueryCalledN(t repositoryTestingT, n int) {
	t.Helper()
	if len(f.QueryCalls) < n {
		t.Errorf("Fakerepository.Query called %d times, expected >= %d", len(f.QueryCalls), n)
	}
}

// QueryCalledWith returns true if Fakerepository.Query was called with the given values
func (f_sym6 *Fakerepository) QueryCalledWith(category string) bool {
	for _, call_sym6 := range f_sym6.QueryCalls {
		if reflect.DeepEqual(call_sym6.Parameters.Category, category) {
			return true
		}
	}

	return false
}

// AssertQueryCalledWith calls t.Error if Fakerepository.Query was not called with the given values
func (f_sym7 *Fakerepository) AssertQueryCalledWith(t repositoryTestingT, category string) {
	t.Helper()
	var found_sym7 bool
	for _, call_sym7 := range f_sym7.QueryCalls {
		if reflect.DeepEqual(call_sym7.Parameters.Category, category) {
			found_sym7 = true
			break
		}
	}

	if !found_sym7 {
		t.Error("Fakerepository.Query not called with expected parameters")
	}
}

// QueryCalledOnceWith returns true if Fakerepository.Query was called exactly once with the given values
func (f_sym8 *Fakerepository) QueryCalledOnceWith(category string) bool {
	var count_sym8 int
	for _, call_sym8 := range f_sym8.QueryCalls {
		if reflect.DeepEqual(call_sym8.Parameters.Category, category) {
			count_sym8++
		}
	}

	return count_sym8 == 1
}

// AssertQueryCalledOnceWith calls t.Error if Fakerepository.Query was not called exactly once with the given values
func (f_sym9 *Fakerepository) AssertQueryCalledOnceWith(t repositoryTestingT, category string) {
	t.Helper()
	var count_sym9 int
	for _, call_sym9 := range f_sym9.QueryCalls {
		if reflect.DeepEqual(call_sym9.Parameters.Category, category) {
			count_sym9++
		}
	}

	if count_sym9 != 1 {
		t.Errorf("Fakerepository.Query called %d times with expected parameters, expected one", count_sym9)
	}
}

// QueryResultsForCall returns the result values for the first call to Fakerepository.Query with the given values
func (f_sym10 *Fakerepository) QueryResultsForCall(category string) (ident1 []doubles.
	Record, ident2 error, found_sym10 bool) {
	for _, call_sym10 := range f_sym10.QueryCalls {
		if reflect.DeepEqual(call_sym10.Parameters.Category, category) {
			ident1 = call_sym10.Results.Ident1
			ident2 = call_sym10.Results.Ident2
			found_sym10 = true
			break
		}
	}

	return
}
