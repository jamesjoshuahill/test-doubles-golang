// Code generated by counterfeiter. DO NOT EDIT.
package counterfeiter

import (
	"sync"

	doubles "github.com/jamesjoshuahill/test-doubles-golang"
)

type FakeRepository struct {
	QueryStub        func(name, kind string) ([]doubles.Record, error)
	queryMutex       sync.RWMutex
	queryArgsForCall []struct {
		name string
		kind string
	}
	queryReturns struct {
		result1 []doubles.Record
		result2 error
	}
	queryReturnsOnCall map[int]struct {
		result1 []doubles.Record
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepository) Query(name string, kind string) ([]doubles.Record, error) {
	fake.queryMutex.Lock()
	ret, specificReturn := fake.queryReturnsOnCall[len(fake.queryArgsForCall)]
	fake.queryArgsForCall = append(fake.queryArgsForCall, struct {
		name string
		kind string
	}{name, kind})
	fake.recordInvocation("Query", []interface{}{name, kind})
	fake.queryMutex.Unlock()
	if fake.QueryStub != nil {
		return fake.QueryStub(name, kind)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.queryReturns.result1, fake.queryReturns.result2
}

func (fake *FakeRepository) QueryCallCount() int {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return len(fake.queryArgsForCall)
}

func (fake *FakeRepository) QueryArgsForCall(i int) (string, string) {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return fake.queryArgsForCall[i].name, fake.queryArgsForCall[i].kind
}

func (fake *FakeRepository) QueryReturns(result1 []doubles.Record, result2 error) {
	fake.QueryStub = nil
	fake.queryReturns = struct {
		result1 []doubles.Record
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) QueryReturnsOnCall(i int, result1 []doubles.Record, result2 error) {
	fake.QueryStub = nil
	if fake.queryReturnsOnCall == nil {
		fake.queryReturnsOnCall = make(map[int]struct {
			result1 []doubles.Record
			result2 error
		})
	}
	fake.queryReturnsOnCall[i] = struct {
		result1 []doubles.Record
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
