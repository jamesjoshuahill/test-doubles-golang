// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/jamesjoshuahill/test-doubles-golang/pegomock (interfaces: repository)

package pegomock_test

import (
	"reflect"

	pegomock "github.com/jamesjoshuahill/test-doubles-golang/pegomock"
	pegomock0 "github.com/petergtz/pegomock"
)

type Mockrepository struct {
	fail func(message string, callerSkip ...int)
}

func NewMockrepository() *Mockrepository {
	return &Mockrepository{fail: pegomock0.GlobalFailHandler}
}

func (mock *Mockrepository) Query(name string, category string) ([]pegomock.Record, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockMockrepository().")
	}
	params := []pegomock0.Param{name, category}
	result := pegomock0.GetGenericMockFrom(mock).Invoke("Query", params, []reflect.Type{reflect.TypeOf((*[]pegomock.Record)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []pegomock.Record
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]pegomock.Record)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *Mockrepository) VerifyWasCalledOnce() *Verifierrepository {
	return &Verifierrepository{mock, pegomock0.Times(1), nil}
}

func (mock *Mockrepository) VerifyWasCalled(invocationCountMatcher pegomock0.Matcher) *Verifierrepository {
	return &Verifierrepository{mock, invocationCountMatcher, nil}
}

func (mock *Mockrepository) VerifyWasCalledInOrder(invocationCountMatcher pegomock0.Matcher, inOrderContext *pegomock0.InOrderContext) *Verifierrepository {
	return &Verifierrepository{mock, invocationCountMatcher, inOrderContext}
}

type Verifierrepository struct {
	mock                   *Mockrepository
	invocationCountMatcher pegomock0.Matcher
	inOrderContext         *pegomock0.InOrderContext
}

func (verifier *Verifierrepository) Query(name string, category string) *repository_Query_OngoingVerification {
	params := []pegomock0.Param{name, category}
	methodInvocations := pegomock0.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Query", params)
	return &repository_Query_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type repository_Query_OngoingVerification struct {
	mock              *Mockrepository
	methodInvocations []pegomock0.MethodInvocation
}

func (c *repository_Query_OngoingVerification) GetCapturedArguments() (string, string) {
	name, category := c.GetAllCapturedArguments()
	return name[len(name)-1], category[len(category)-1]
}

func (c *repository_Query_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string) {
	params := pegomock0.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
	}
	return
}
