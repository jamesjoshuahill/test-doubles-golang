// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/jamesjoshuahill/test-doubles-golang (interfaces: logger)

package pegomock

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
)

type Mocklogger struct {
	fail func(message string, callerSkip ...int)
}

func NewMocklogger() *Mocklogger {
	return &Mocklogger{fail: pegomock.GlobalFailHandler}
}

func (mock *Mocklogger) Info(msg string) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockMocklogger().")
	}
	params := []pegomock.Param{msg}
	pegomock.GetGenericMockFrom(mock).Invoke("Info", params, []reflect.Type{})
}

func (mock *Mocklogger) VerifyWasCalledOnce() *Verifierlogger {
	return &Verifierlogger{mock, pegomock.Times(1), nil}
}

func (mock *Mocklogger) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *Verifierlogger {
	return &Verifierlogger{mock, invocationCountMatcher, nil}
}

func (mock *Mocklogger) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *Verifierlogger {
	return &Verifierlogger{mock, invocationCountMatcher, inOrderContext}
}

type Verifierlogger struct {
	mock                   *Mocklogger
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *Verifierlogger) Info(msg string) *logger_Info_OngoingVerification {
	params := []pegomock.Param{msg}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Info", params)
	return &logger_Info_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type logger_Info_OngoingVerification struct {
	mock              *Mocklogger
	methodInvocations []pegomock.MethodInvocation
}

func (c *logger_Info_OngoingVerification) GetCapturedArguments() string {
	msg := c.GetAllCapturedArguments()
	return msg[len(msg)-1]
}

func (c *logger_Info_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}
